name: AI Code Analysis on PR Events

on:
  workflow_call:
    inputs:
      directory:
        description: 'Directory to scan for code analysis'
        required: false
        type: string
      exclude:
        description: 'Comma-separated list of files or directories to exclude'
        required: false
        type: string

jobs:
  analyze_code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install axios js-yaml minimatch

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Load Config and Set Environment Variables
        run: |
          CONFIG_FILE=".github/config/code_analysis_config.yml"
          if [[ ! -f "$CONFIG_FILE" ]]; then
            echo "Error: Configuration file not found at $CONFIG_FILE"
            exit 1
          fi
      
          # Extract values from config file
          MAX_SIZE_MB=$(yq e '.max_size_mb' "$CONFIG_FILE")
          APPROVED_TYPES=$(yq e '.approved_types | join(" ")' "$CONFIG_FILE")
          MAX_CALLS_PER_HOUR=$(yq e '.max_calls_per_hour' "$CONFIG_FILE")
          DEFAULT_DIRECTORY=$(yq e '.directory' "$CONFIG_FILE")
          DEFAULT_EXCLUDE=$(yq e '.exclude' "$CONFIG_FILE")

          # Use input if provided, otherwise fall back to default config values
          if [[ -n "${{ inputs.directory }}" ]]; then
            DIRECTORY="${{ inputs.directory }}"
          else
            DIRECTORY="$DEFAULT_DIRECTORY"
          fi

          if [[ -n "${{ inputs.exclude }}" ]]; then
            EXCLUDE="${{ inputs.exclude }}"
          else
            EXCLUDE="$DEFAULT_EXCLUDE"
          fi
      
          # Check if required configuration fields are missing
          if [[ -z "$MAX_SIZE_MB" ]]; then
            echo "Error: max_size_mb is not defined in the configuration file"
            exit 1
          fi
          if [[ -z "$APPROVED_TYPES" ]]; then
            echo "Error: approved_types is not defined in the configuration file"
            exit 1
          fi
          if [[ -z "$MAX_CALLS_PER_HOUR" ]]; then
            echo "Error: max_calls_per_hour is not defined in the configuration file"
            exit 1
          fi
          if [[ -z "$DIRECTORY" ]]; then
            echo "Error: directory is not provided as an input or in the configuration file"
            exit 1
          fi
          if [[ -z "$EXCLUDE" ]]; then
            echo "Error: exclude is not provided as an input or in the configuration file"
            exit 1
          fi
          
          # Ensure the directory actually exists
          if [[ ! -d "$DIRECTORY" ]]; then
            echo "Error: Specified directory '$DIRECTORY' does not exist."
            exit 1
          fi
      
          # Set environment variables
          echo "MAX_SIZE_MB=$MAX_SIZE_MB" >> $GITHUB_ENV
          echo "APPROVED_TYPES=$APPROVED_TYPES" >> $GITHUB_ENV
          echo "MAX_CALLS_PER_HOUR=$MAX_CALLS_PER_HOUR" >> $GITHUB_ENV
          echo "DIRECTORY=$DIRECTORY" >> $GITHUB_ENV
          echo "EXCLUDE=$EXCLUDE" >> $GITHUB_ENV

      - name: Run Code Analysis and Capture Output
        id: code_analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Capture the output and handle multiline content with delimiters
          ANALYSIS_OUTPUT=$(node .github/actions/code_analysis_with_gitignore_exclude.js)
          
          echo "$ANALYSIS_OUTPUT"

          echo "ANALYSIS_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$ANALYSIS_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  
      - name: Post or Update Code Analysis Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_IDENTIFIER="<!-- code-analysis-comment -->"

          # Retrieve and escape the analysis output safely
          COMMENT_RESULTS="${{ steps.code_analysis.outputs.ANALYSIS_OUTPUT }}"
          ESCAPED_COMMENT_RESULTS=$(printf "%s" "$COMMENT_RESULTS" | sed 's/"/\\"/g; s/$/\\n/')

          COMMENT_CONTENT="$COMMENT_IDENTIFIER\n### AI Code Analysis Results\n\n$ESCAPED_COMMENT_RESULTS"

          # Find and delete previous comments
          previous_comment_ids=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            | jq -r ".[] | select(.body | contains(\"$COMMENT_IDENTIFIER\")) | .id")

          for comment_id in $previous_comment_ids; do
            gh api repos/${{ github.repository }}/issues/comments/$comment_id -X DELETE
          done

          # Post the new, cleaned-up comment
          gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$COMMENT_CONTENT"
